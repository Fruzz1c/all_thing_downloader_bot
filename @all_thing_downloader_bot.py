# @all_thing_downloader_bot.py
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç (Instagram/TikTok/YouTube/X/VK/Reddit –∏ –¥—Ä.)
# - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏ <= 64 –±–∞–π—Ç (—á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π token).
# - –°–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.14 (—è–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º event loop).
# - –£–≤–µ–ª–∏—á–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram.
# - –ï—Å–ª–∏ ffmpeg –Ω–µ –≤ PATH ‚Äî –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å FFMPEG_LOCATION.

from __future__ import annotations

import os
import re
import sys
import asyncio
import tempfile
import logging
import secrets
from pathlib import Path
from urllib.parse import urlparse

from yt_dlp import YoutubeDL
from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.request import HTTPXRequest
from telegram.error import TimedOut

# ==============================
# üëâ –¢–≤–æ–π —Ç–æ–∫–µ–Ω
import os
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")
# ==============================

# –ï—Å–ª–∏ ffmpeg –ù–ï –≤ PATH ‚Äî –ø—Ä–æ–ø–∏—à–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å ffmpeg/ffprobe:
FFMPEG_LOCATION: str | None = None  # –ù–∞–ø—Ä–∏–º–µ—Ä: r"C:\ffmpeg\ffmpeg-2025-xx-xx-full_build\bin"

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger("downloader_bot")

BASE_YTDLP_OPTS: dict = {
    "outtmpl": "%(id)s.%(ext)s",
    "quiet": True,
    "no_warnings": True,
    "merge_output_format": "mp4",
    "postprocessors": [{"key": "FFmpegVideoConvertor", "preferedformat": "mp4"}],
}
if FFMPEG_LOCATION:
    BASE_YTDLP_OPTS["ffmpeg_location"] = FFMPEG_LOCATION

URL_RE = re.compile(r"(https?://[^\s]+)", re.IGNORECASE | re.MULTILINE)

# =================== –£—Ç–∏–ª–∏—Ç—ã ===================

def extract_first_url(text: str) -> str | None:
    if not text:
        return None
    m = URL_RE.search(text)
    return m.group(1) if m else None

def hostname(url: str) -> str:
    try:
        return (urlparse(url).hostname or "").lower()
    except Exception:
        return ""

def human_provider(url: str) -> str:
    host = hostname(url)
    if "instagram" in host:
        return "Instagram"
    if "tiktok" in host:
        return "TikTok"
    if host in {"youtu.be", "youtube.com", "www.youtube.com", "m.youtube.com"} or "youtube" in host:
        return "YouTube"
    if "twitter" in host or host == "x.com":
        return "X (Twitter)"
    if "vk.com" in host:
        return "VK"
    if "reddit" in host:
        return "Reddit"
    return host or "–ò—Å—Ç–æ—á–Ω–∏–∫"

def pick_filename_from_dir(target_dir: Path, media_id: str | None) -> Path | None:
    files = list(target_dir.iterdir())
    if not files:
        return None
    if media_id:
        for p in files:
            if media_id in p.name:
                return p
    return files[0]

def build_format_string(height: int | None) -> str:
    if not height:
        return "bestvideo*+bestaudio/best"
    return f"bestvideo*[height<=?{height}]+bestaudio/best[height<=?{height}]"

def unique_sorted_heights(formats: list[dict]) -> list[int]:
    heights = {f.get("height") for f in formats if isinstance(f.get("height"), int)}
    heights = [h for h in heights if h and h >= 240]
    heights.sort()
    return heights

async def ytdlp_extract(url: str, download: bool, fmt: str | None, target_dir: Path) -> dict | None:
    loop = asyncio.get_running_loop()

    def run_ydl():
        opts = dict(BASE_YTDLP_OPTS)
        if fmt:
            opts["format"] = fmt
        cwd = os.getcwd()
        try:
            os.chdir(target_dir)
            with YoutubeDL(opts) as ydl:
                return ydl.extract_info(url, download=download)
        finally:
            os.chdir(cwd)

    return await loop.run_in_executor(None, run_ydl)

# =================== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö callback ===================
# context.user_data["dl_store"] = { token: {"url": str, "tmpdir": TemporaryDirectory} }

def store_new_job(user_data: dict, url: str, tmpdir) -> str:
    store: dict = user_data.setdefault("dl_store", {})
    token = secrets.token_urlsafe(8)
    store[token] = {"url": url, "tmpdir": tmpdir}
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤–∏–∫—Ü–∏—è
    if len(store) > 50:
        for k in list(store.keys())[: len(store) - 50]:
            job = store.pop(k, None)
            try:
                if job and "tmpdir" in job:
                    job["tmpdir"].cleanup()
            except Exception:
                pass
    return token

def pop_job(user_data: dict, token: str):
    store: dict = user_data.get("dl_store") or {}
    return store.pop(token, None)

# =================== Handlers ===================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (Instagram, TikTok, YouTube, X/Twitter, VK, Reddit –∏ –¥—Ä.).\n"
        "–ü–æ–∫–∞–∂—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ‚Äî –≤—ã–±–µ—Ä–µ—à—å –∏ –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "1) –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç/–≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü—Å–µ—Ç–∏.\n"
        "2) –Ø –ø—Ä–µ–¥–ª–æ–∂—É —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.\n"
        "3) –ù–∞–∂–º–∏ –Ω—É–∂–Ω–æ–µ ‚Äî —Å–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é.\n\n"
        "–°–æ–≤–µ—Ç: –ø–æ—Å—Ç–∞–≤—å ffmpeg –≤ PATH –∏–ª–∏ —É–∫–∞–∂–∏ –ø—É—Ç—å –≤ FFMPEG_LOCATION –≤ –∫–æ–¥–µ."
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text or update.message.caption or ""
    url = extract_first_url(text)
    if not url:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üôè")
        return

    status = await update.message.reply_text("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É‚Ä¶")

    tmpdir = tempfile.TemporaryDirectory()
    tmp_path = Path(tmpdir.name)

    try:
        info = await ytdlp_extract(url, download=False, fmt=None, target_dir=tmp_path)
        if not info:
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            tmpdir.cleanup()
            return

        if "entries" in info and isinstance(info["entries"], list) and info["entries"]:
            info = info["entries"][0]

        formats = info.get("formats") or []
        heights = unique_sorted_heights(formats)
        provider = human_provider(url)
        title = info.get("title") or "–í–∏–¥–µ–æ"

        token = store_new_job(context.user_data, url, tmpdir)

        buttons: list[list[InlineKeyboardButton]] = []
        wanted = [240, 360, 480, 720, 1080, 1440, 2160]
        display_heights = [h for h in wanted if h in heights]
        if not display_heights:
            display_heights = heights[-3:] if len(heights) > 3 else heights

        row: list[InlineKeyboardButton] = []
        for h in display_heights:
            row.append(InlineKeyboardButton(text=f"{h}p", callback_data=f"dl|{token}|h{h}"))
            if len(row) == 3:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        buttons.append([InlineKeyboardButton(text="–õ—É—á—à–µ–µ", callback_data=f"dl|{token}|best")])

        await status.edit_text(
            f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {provider}\n"
            f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        await status.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–∫–∏: {e}")
        tmpdir.cleanup()

async def _send_with_retries_as_video_or_doc(message, file_path: Path, caption: str):
    """–°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ video, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç. –û–±–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –Ω–∞ TimedOut."""
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞—é¬ª –∑–∞–≥—Ä—É–∑–∫—É
    try:
        await message.chat.send_action(action=ChatAction.UPLOAD_VIDEO)
    except Exception:
        pass

    # 1) –∫–∞–∫ –≤–∏–¥–µ–æ
    for attempt in range(3):
        try:
            with file_path.open("rb") as f:
                return await message.reply_video(video=InputFile(f, filename=file_path.name), caption=caption)
        except TimedOut:
            if attempt == 2:
                break
            await asyncio.sleep(2 * (attempt + 1))
        except Exception:
            break  # –ø–∞–¥–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç

    # 2) –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    for attempt in range(3):
        try:
            with file_path.open("rb") as f:
                return await message.reply_document(document=InputFile(f, filename=file_path.name), caption=caption)
        except TimedOut:
            if attempt == 2:
                raise
            await asyncio.sleep(2 * (attempt + 1))

async def on_download_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    data = (query.data or "").split("|", 2)  # ["dl", token, "h720"/"best"]
    if len(data) != 3 or data[0] != "dl":
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    token, mode = data[1], data[2]
    job = pop_job(context.user_data, token)
    if not job:
        await query.edit_message_text("‚åõ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")
        return

    url = job.get("url")
    tmpdir = job.get("tmpdir")
    if not url or not tmpdir:
        await query.edit_message_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏.")
        try:
            if tmpdir:
                tmpdir.cleanup()
        except Exception:
            pass
        return

    chosen_height: int | None
    if mode == "best":
        chosen_height = None
    elif mode.startswith("h"):
        try:
            chosen_height = int(mode[1:])
        except ValueError:
            chosen_height = None
    else:
        chosen_height = None

    provider = human_provider(url)
    await query.edit_message_text(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –∏–∑ {provider}‚Ä¶")

    tmp_path = Path(tmpdir.name)

    try:
        fmt = build_format_string(chosen_height)
        info = await ytdlp_extract(url, download=True, fmt=fmt, target_dir=tmp_path)
        if not info:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö).")
            return

        if "entries" in info and isinstance(info["entries"], list) and info["entries"]:
            info = info["entries"][0]

        media_id = info.get("id") or info.get("display_id") or ""
        file_path = pick_filename_from_dir(tmp_path, media_id)
        if not file_path or not file_path.exists():
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return

        caption = (info.get("title") or "–í–∏–¥–µ–æ")[:900]

        try:
            await _send_with_retries_as_video_or_doc(query.message, file_path, caption)
            await query.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        except Exception as e_send:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await query.edit_message_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e_send}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏")
        try:
            await query.edit_message_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        except Exception:
            pass
    finally:
        try:
            tmpdir.cleanup()
        except Exception:
            pass

# =================== –ó–∞–ø—É—Å–∫ (Python 3.14) ===================

def build_app() -> Application:
    # –ë–æ–ª—å—à–∏–µ —Ç–∞–π–º–∞—É—Ç—ã, —á—Ç–æ–±—ã –∞–ø–ª–æ–∞–¥ –Ω–µ —É–ø–∏—Ä–∞–ª—Å—è –≤ write timeout
    request = HTTPXRequest(
        connect_timeout=30.0,
        read_timeout=600.0,
        write_timeout=600.0,
        pool_timeout=30.0,
    )

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).request(request).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(on_download_choice, pattern=r"^dl\|"))
    return app

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    # –í Python 3.14 get_event_loop() –Ω–µ —Å–æ–∑–¥–∞—ë—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º —è–≤–Ω–æ
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
